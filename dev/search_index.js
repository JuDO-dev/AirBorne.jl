var documenterSearchIndex = {"docs":
[{"location":"pages/contributionGuidelines/#Contribution-Guidelines","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"","category":"section"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"This notes are meant for developers wanting to contribute to this project.","category":"page"},{"location":"pages/contributionGuidelines/#Local-environment-for-development","page":"Contribution Guidelines","title":"Local environment for development","text":"","category":"section"},{"location":"pages/contributionGuidelines/#Best-practices-for-merging","page":"Contribution Guidelines","title":"Best practices for merging","text":"","category":"section"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"This guide of best practices are to help developers understand the code written, to ensure good documentation is available for end users and guarantee robustness of the code.","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"Function docstrings: Each function needs to be adequately documented, with inputs and outputs defined. On examples try using jldoctest language type instead of julia except for OS/circumstance specific examples.\nModule docstrings: Each module needs to have a docstring explaining its function and what it represents\nRespect unit tests: Unit tests are put for a reason, make sure all pass before merging into a shared development branch. The reason for the unit test should be indicated somewhere in the code.\nRespect style: Havin a consistent writing style help the developers read the code and brings homogeneity to the contributions. To do this we adhere to te Blue style. ","category":"page"},{"location":"pages/contributionGuidelines/#Branch-Management","page":"Contribution Guidelines","title":"Branch Management","text":"","category":"section"},{"location":"pages/contributionGuidelines/#Archiving","page":"Contribution Guidelines","title":"Archiving","text":"","category":"section"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"Sometimes we want to keep a branch with some data, but at the same time we don't want to pollute the list of branches in the repository. A way to achieve this is through the usage of tags. The archived branches can be accessed later on by looking at the tags of the repository, following GitHub instructions.","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"# For example we may want to archive or restore the add-quandl branch when picking up the connection to the datasource Quandl. \nexport BRANCH=add-quandl\n# Tag branch (this will add it to the archive)\ngit tag archive/$BRANCH $BRANCH\n# Push the tag to remote\ngit push origin archive/$BRANCH\n# Deleate head of branch (this will remove it from the list)\ngit push origin --delete $BRANCH\n# This will restore the branch\ngit checkout -b $BRANCH archive/$BRANCH","category":"page"},{"location":"pages/contributionGuidelines/#Citation-and-credits","page":"Contribution Guidelines","title":"Citation and credits","text":"","category":"section"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"It is important to identify and credit the contributors of this project, in particular the ones that will act as a point of contact for external enquiries. To do this we put in place a CITATION.cff file that should follow the schema of Github's citation guidelines. ","category":"page"},{"location":"pages/contributionGuidelines/#Local-environment-for-development-2","page":"Contribution Guidelines","title":"Local environment for development","text":"","category":"section"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"This section is meant for new joiners or people new to software development. If you already know about local environments and have your own style to generate functional code, feel free to skip this section.","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"In this repository you can find a local environment in which the package is guaranteed to work, to do so we leverage docker containers.","category":"page"},{"location":"pages/contributionGuidelines/#Setting-up-a-local-environment","page":"Contribution Guidelines","title":"Setting up a local environment","text":"","category":"section"},{"location":"pages/contributionGuidelines/#How-to-import-package","page":"Contribution Guidelines","title":"How to import package","text":"","category":"section"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"Until package is released, the package can be locally imported by using ","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"develop \"../AirBorne\"","category":"page"},{"location":"pages/contributionGuidelines/#How-to-test-connection-to-GitHub","page":"Contribution Guidelines","title":"How to test connection to GitHub","text":"","category":"section"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"For some operations connection to GitHub may be required, to test your SSH connection in the console use the command below: ","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"ssh -T git@github.com","category":"page"},{"location":"pages/contributionGuidelines/#How-to-perform-unit-tests-efficiently","page":"Contribution Guidelines","title":"How to perform unit tests efficiently","text":"","category":"section"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"Unit testing when executed for the first time takes long, most of the time is taken in compilation. This formula will let you compile once and then execute tests rapidly.","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"First open a console in the testing environment.","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"make J","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"Then execute the following three commands in the newly open Julia console:","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"# Activate Test Dependencies\n\n\nusing TestEnv\nTestEnv.activate()\n\n# In Pkg REPL \ndev \"../AirBorne\"\n\n# Test using Revise\nusing Revise\n# dev \"../AirBorne\" # In Pkg REPL\ninclude(\"test/runtests.jl\")\n\n# To execute a single test just use the command below and replace \n# test_file by the name of the file containing the test you want to run.\n# include(\"test/test_file.jl\")\n# include(\"test/backtest_A.jl\")\n# include(\"test/FM.jl\")","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"using Revise\nOpen the Pkg REPL using ] and type: dev \"../AirBorne\"\nGo back using backspace and use include(\"test/runtests.jl\")","category":"page"},{"location":"pages/contributionGuidelines/","page":"Contribution Guidelines","title":"Contribution Guidelines","text":"Now anytime you want to test your code again type include(\"test/runtests.jl\") (or just use the up arrow to select the last command that ran).","category":"page"},{"location":"pages/etl/etl/#ETL-Pipeline.","page":"Data Pipeline","title":"ETL Pipeline.","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"ETL, standing for Extract, Transform and Load, is the process of combining data from multiple sources into a large central repository of data. What is ETL? (AWS)","category":"page"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"This package should have an ETL capability to retrieve and store financial data ","category":"page"},{"location":"pages/etl/etl/#.-Extract","page":"Data Pipeline","title":"1. Extract","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"Data can extracted from:","category":"page"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"APIs of data providers such as Quandl or Yahoo\nAPIs of brokers such as Alpaca\nLocal files such as CSVs or JSON with a predetermined format","category":"page"},{"location":"pages/etl/etl/#.-Transform","page":"Data Pipeline","title":"2. Transform","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"Once the data is extracted it locally is formatted and cleaned to standarize the format and schema they should comply with.","category":"page"},{"location":"pages/etl/etl/#.-Load","page":"Data Pipeline","title":"3. Load","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"Lastly the data is served into a variable accessible for the package and persisted in an efficient file format.","category":"page"},{"location":"pages/etl/etl/#Cache-Structure","page":"Data Pipeline","title":"Cache Structure","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"Caching is the local storage of information. Once data has been gathered from a datasource such as Yahoo Finance, Quandl or even simply loaded in memory from a file. Once can choose to store this data so that it can be efficiently retrieved once again by AirBorne.","category":"page"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"The features we aim to obtain with caching are the following:","category":"page"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"I/O Speed: Loading and storing data should be fast, faster than the average loading from a CSV or JSON file. And definitely faster than any API call. \nIntuitive: Users should not have to struggle to retrieve data or store data, if possible this should be done seamlessly in the workflow of the user.\nVersion Controlled: We all make mistakes and sometimes we would like to roll back changes made to our data. This should be possible to achieve.\nStandardized: Although is good to have ample formats available when it comes to storage is good to have standard file formats, this makes the data compliant with many algorithms as the algorithms will be designed with this standard in mind. This also greatly helps speed as the load and storage of data happen in a predefined manner.","category":"page"},{"location":"pages/etl/etl/#How-does-it-work?","page":"Data Pipeline","title":"How does it work?","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"First one needs a cache folder, which can be set by the environment variable AIRBORNE_ROOT. If this variable is not defined for Linux and MacOS it will defaulted to /root/tmp/.AirBorne/.cache whilst in windows it shall be $HOME/.AirBorne/.cache\".","category":"page"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"On said folder there will be many subdirectories, each one corresponding to a separate data bundle. A bundle is the most fundamental level of cache, that is composed by 3 elements. The data file, which is stored in Parquet Format, the metadata that is attached to the parquet file itself, and the archive subfolder containing previous iterations of the cached file.","category":"page"},{"location":"pages/etl/etl/#Supported-schemas-and-file-structure","page":"Data Pipeline","title":"Supported schemas and file structure","text":"","category":"section"},{"location":"pages/etl/etl/#OHLCV","page":"Data Pipeline","title":"OHLCV","text":"","category":"section"},{"location":"pages/etl/etl/#File-structures-on-other-platforms","page":"Data Pipeline","title":"File structures on other platforms","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"Many trading platforms have their own schemas for data","category":"page"},{"location":"pages/etl/etl/#Zorro's","page":"Data Pipeline","title":"Zorro's","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"The zorro project have what they call the T file formats, where a tx file a timestamp \"t\" and x elements. These files are CSV or JSON files stored in ","category":"page"},{"location":"pages/etl/etl/#Headers:","page":"Data Pipeline","title":"Headers:","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"Start - token name or start string of the whole price structure. Determines from where to parse.\nTimeformat - format of the date/time field with DATE format codes, as in the CSV format string.\nTime - token name of the date/time field.\nHigh,Low,Open,Close - token names of the price fields.\nAdjClose - token name of the adjusted close field, or empty if the file contains no such field.\nVolume - toke name of the volume field, or empty if the file contains no volume data.\nAsk - token name of the best ask quote field.\nAskSize - token name of the ask size field.\nBid - token name of the best bid quote field, or empty if the file contains no bid quotes.\nBidSize - token name of the bid size field, or empty.","category":"page"},{"location":"pages/etl/etl/#File-Format:","page":"Data Pipeline","title":"File Format:","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"typedef struct T1\n{\n  DATE  time; // UTC timestamp of the tick in DATE format\n  float fPrice; // price data, positive for ask and negative for bid\n} T1;\n \ntypedef struct T2\n{\n  DATE time;  // UTC timestamp in DATE format\n  float fPrice; // price, negative for bid quotes\n  float fVol; // trade volume or ask/bid size\n} T2; \n \ntypedef struct T6\n{\n  DATE  time; // UTC timestamp of the close, DATE format\n  float fHigh,fLow;\t\n  float fOpen,fClose;\t\n  float fVal,fVol; // additional data, ask-bid spread, volume etc.\n} T6;\n \ntypedef struct CONTRACT\n{\n  DATE  time;   // UTC timestamp in DATE format\n  float fAsk,fBid; // premium without multiplier\n  float fVal,fVol;  // additional data, like delta, open interest, etc.\n  float fUnl;   // underlying price (unadjusted)\n  float fStrike; // strike price\n  long  Expiry; // YYYYMMDD format\n  long  Type;   // PUT, CALL, FUTURE, EUROPEAN, BINARY\n} CONTRACT;","category":"page"},{"location":"pages/etl/etl/#Zipline","page":"Data Pipeline","title":"Zipline","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"Zipline uses what they call OHLCV format, standing for Open, High, Low, Close, Volume. Is a common format to convey daily trade information about a ticker, in addition to the columns in the name actually more columns need to be provided.","category":"page"},{"location":"pages/etl/etl/#File-Format:-2","page":"Data Pipeline","title":"File Format:","text":"","category":"section"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"Zipline actually stores data in a file system. Given a persistency (or cache) directory. It stores the data in bundles stored the following structure $CACHE_PATH/{source_id}/{bundle_id}/ the bundle is then formed in bcolz format","category":"page"},{"location":"pages/etl/etl/","page":"Data Pipeline","title":"Data Pipeline","text":"Zipline OHLCV: Date, Open, High, Low, Close, Volume, Dividend, Split","category":"page"},{"location":"pages/highLevelDesign/#High-Level-Design","page":"Glossary","title":"High Level Design","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"In this section definition for the main objects in this package are presented as well as an introduction to the main logic behind the structure of the package.","category":"page"},{"location":"pages/highLevelDesign/#ETL-Pipeline","page":"Glossary","title":"ETL Pipeline","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"ETL, standing for Extract, Transform and Load, is the process of combining data from multiple sources into a large central repository of data. What is ETL? (AWS)","category":"page"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"This package needs to have an ETL capability to retrieve and store financial data, for reproducibility and post-analytics purposes.","category":"page"},{"location":"pages/highLevelDesign/#Objects","page":"Glossary","title":"Objects","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"In this section we will describe the objects present in the package, some are related to physical and financial entities found in the real world. To ensure our definitions well aligned with the financial we leverage most of the definitions from well established financial entities and/or acadamic sources. In particular IG International Limited: Glossary of Trading Terms is substantially used to support our definitions.","category":"page"},{"location":"pages/highLevelDesign/#Financial-Entities:","page":"Glossary","title":"Financial Entities:","text":"","category":"section"},{"location":"pages/highLevelDesign/#Investor","page":"Glossary","title":"Investor","text":"","category":"section"},{"location":"pages/highLevelDesign/#Broker","page":"Glossary","title":"Broker","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"Definition from IG International Limited: A broker is an independent person or a company that organises and executes financial transactions on behalf of another party. They can do this across a number of different asset classes, including stocks, forex, real estate and insurance. A broker will normally charge a commission for the order to be executed. Some brokers will provide you with market data and give you advice on the products you want to buy or sell – depending on whether they are a full service broker, or execution only. However, a broker must be licensed to give advice and execute the sale, and they will only perform trades on your behalf once you have given them the go-ahead.","category":"page"},{"location":"pages/highLevelDesign/#Market","page":"Glossary","title":"Market","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"Definition from IG International Limited: A financial market is defined as a medium through which assets are traded, enabling buyers and sellers to interact and facilitate exchanges. However, the term can be used in a variety of different ways – it can refer physical places, virtual exchanges or groups of people that are interested in making transactions.","category":"page"},{"location":"pages/highLevelDesign/#Financial-constructs-and-instruments","page":"Glossary","title":"Financial constructs and instruments","text":"","category":"section"},{"location":"pages/highLevelDesign/#Currency","page":"Glossary","title":"Currency","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"Investopedia definition  Currency is a medium of exchange for goods and services. In short, it's money, in the form of paper and coins, usually issued by a government and generally accepted at its face value as a method of payment.","category":"page"},{"location":"pages/highLevelDesign/#Asset","page":"Glossary","title":"Asset","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"Definition from IG International Limited: An asset is an economic resource which can be owned or controlled to return a profit, or a future benefit. In financial trading, the term asset relates to what is being exchanged on markets, such as stocks, bonds, currencies or commodities.","category":"page"},{"location":"pages/highLevelDesign/#Spread","page":"Glossary","title":"Spread","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"Definition from IG International Limited: In finance, the spread is the difference in price between the buy (bid) and sell (offer) prices quoted for an asset.","category":"page"},{"location":"pages/highLevelDesign/#Position","page":"Glossary","title":"Position","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"Definition from IG International Limited: A position is the expression of a market commitment, or exposure, held by a trader. It is the financial term for a trade that is either currently able to incur a profit or a loss – known as an open position – or a trade that has recently been cancelled, known as a closed position. Profit or loss on a position can only be realised once it has been closed.","category":"page"},{"location":"pages/highLevelDesign/#Option","page":"Glossary","title":"Option","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"Definition from IG International Limited: An option is a financial instrument that offers you the right – but not the obligation – to buy or sell an asset when its price moves beyond a certain price with a set time period.","category":"page"},{"location":"pages/highLevelDesign/#Portfolio","page":"Glossary","title":"Portfolio","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"Definition from IG International Limited: A portfolio refers to group of assets that are held by a trader or trading company. Assets in a portfolio can come in many forms, including stocks, bonds, commodities or derivatives.","category":"page"},{"location":"pages/highLevelDesign/#Technical-Objects","page":"Glossary","title":"Technical Objects","text":"","category":"section"},{"location":"pages/highLevelDesign/#Simulations-and-Backtesting","page":"Glossary","title":"Simulations and Backtesting","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"In this section we will describe different calculations and methods used for the backtesting or simulation of a strategy.","category":"page"},{"location":"pages/highLevelDesign/#Portfolio-calculations-/-Financial-reports","page":"Glossary","title":"Portfolio calculations / Financial reports","text":"","category":"section"},{"location":"pages/highLevelDesign/#Returns","page":"Glossary","title":"Returns","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"Definition from IG International Limited:  Rate of return (ROR) is the loss or gain of an investment over a certain period, expressed as a percentage of the initial cost of the investment. A positive ROR means the position has made a profit, while a negative ROR means a loss. You will have a rate of return on any investment you make.","category":"page"},{"location":"pages/highLevelDesign/#PnL:-Profit-and-Losses","page":"Glossary","title":"PnL: Profit and Losses","text":"","category":"section"},{"location":"pages/highLevelDesign/","page":"Glossary","title":"Glossary","text":"Definition from IG International Limited:  A profit and loss (P&L) statement is a financial report that provides a summary of a company’s revenue, expenses and profit. It gives investors and other interested parties an insight into how a company is operating and whether it has the ability to generate a profit.","category":"page"},{"location":"pages/autodocs/","page":"Autodocs","title":"Autodocs","text":"CurrentModule = AirBorne","category":"page"},{"location":"pages/autodocs/#Automated-Documentation","page":"Autodocs","title":"Automated Documentation","text":"","category":"section"},{"location":"pages/autodocs/","page":"Autodocs","title":"Autodocs","text":"Welcome to the documentation for AirBorne!","category":"page"},{"location":"pages/autodocs/","page":"Autodocs","title":"Autodocs","text":"These are the autodocs generated by Documenter.jl. ","category":"page"},{"location":"pages/autodocs/#Index","page":"Autodocs","title":"Index","text":"","category":"section"},{"location":"pages/autodocs/","page":"Autodocs","title":"Autodocs","text":"","category":"page"},{"location":"pages/autodocs/#Autodocs","page":"Autodocs","title":"Autodocs","text":"","category":"section"},{"location":"pages/autodocs/","page":"Autodocs","title":"Autodocs","text":"Modules = [AirBorne,AirBorne.Structures,AirBorne.Utils]","category":"page"},{"location":"pages/autodocs/#AirBorne.Money","page":"Autodocs","title":"AirBorne.Money","text":"Just a float with an associated Symbol\n\n\n\n\n\n","category":"type"},{"location":"pages/autodocs/#AirBorne.Wallet","page":"Autodocs","title":"AirBorne.Wallet","text":"Just a wrapper around a dictionary\n\n\n\n\n\n","category":"type"},{"location":"pages/autodocs/#Base.:==-Tuple{AirBorne.Wallet, AirBorne.Wallet}","page":"Autodocs","title":"Base.:==","text":"Test if Wallets are identical. Potentially can be redefined as ===  and leave == if different keys are set to 0\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.Structures.ContextTypeA","page":"Autodocs","title":"AirBorne.Structures.ContextTypeA","text":"Context definitions for contract between Engines, Markets and Strategies to operate with.\n\n\n\n\n\n","category":"type"},{"location":"pages/autodocs/#AirBorne.Utils.deepPush!-Tuple{Any, Any}","page":"Autodocs","title":"AirBorne.Utils.deepPush!","text":"deepPush!(list,element)\n\nInserts the deepcopy of an element into a collection \n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.Utils.get_latest-Tuple{Any, Any, Any}","page":"Autodocs","title":"AirBorne.Utils.get_latest","text":"get_latest(df,id_symbols,sort_symbol)\n\nRetrieves last record from a dataframe, sortying by sort_symbol and grouping by id_symbols.\n\n```julia\nget_latest(past_data,[:exchangeName,:symbol],:date)\n```\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.Utils.hello_world-Tuple{}","page":"Autodocs","title":"AirBorne.Utils.hello_world","text":"hello_world()\n\nReturns a string saying \"Hello World!\".\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.Utils.sortStruct!-Tuple{Vector, Any}","page":"Autodocs","title":"AirBorne.Utils.sortStruct!","text":"sortStruct!(v::Vector, symbol;rev=true) \n\nSorts a struct by a given symbol.\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.Utils.sortedStructInsert!-Tuple{Vector, Any, Any}","page":"Autodocs","title":"AirBorne.Utils.sortedStructInsert!","text":"sortedStructInsert!(v::Vector, x,symbol;rev=true) \n\nInserts a struct into a sorted Vector of structs in the right place to keep the array sorted.\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/","page":"Autodocs","title":"Autodocs","text":"Modules = [AirBorne.ETL,AirBorne.ETL.Cache,AirBorne.ETL.YFinance]","category":"page"},{"location":"pages/autodocs/#AirBorne.ETL","page":"Autodocs","title":"AirBorne.ETL","text":"This modules centralizes all features for the data pipeline of AirBorne including API\nconnections, cache management and data transformations as part of the data pipeline.\n\n\n\n\n\n","category":"module"},{"location":"pages/autodocs/#AirBorne.ETL.Cache","page":"Autodocs","title":"AirBorne.ETL.Cache","text":"This modules centralizes caching for the AirBorne package. Containing:\n- Definition of data storage procedures\n- Definition of data storage formats\n\n\n\n\n\n","category":"module"},{"location":"pages/autodocs/#AirBorne.ETL.Cache.gen_id-Tuple{}","page":"Autodocs","title":"AirBorne.ETL.Cache.gen_id","text":"gen_id()\n\nGenerates an id based on the current UTC timestamp with format \"yyyy_mm_dd_H_M_S_s\"\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.ETL.Cache.get_cache_path-Tuple{}","page":"Autodocs","title":"AirBorne.ETL.Cache.get_cache_path","text":" get_cache_path()\n\nDefines the cache path depending on the OS and environment variables.\n```julia\njulia> import AirBorne\njulia> AirBorne.ETL.Cache.get_cache_path()\n```\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.ETL.Cache.hello_cache-Tuple{}","page":"Autodocs","title":"AirBorne.ETL.Cache.hello_cache","text":"hello_cache()\n\nReturns a string saying \"Hello Cache!\".\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.ETL.Cache.list_bundles-Tuple{}","page":"Autodocs","title":"AirBorne.ETL.Cache.list_bundles","text":"list_bundles()\n\nReturns the list of bundles available in the cached folder.\n\nIn the future this function can be expanded to return information as timestamp, \nformat of data in bundle among relevant metadata.\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.ETL.Cache.load_bundle-Tuple{String}","page":"Autodocs","title":"AirBorne.ETL.Cache.load_bundle","text":"load_bundle(bundle_id::String)\n\nLoads data from a cached bundle.\n\n# Returns\nDataFrames.DataFrame\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.ETL.Cache.remove_bundle-Tuple{String}","page":"Autodocs","title":"AirBorne.ETL.Cache.remove_bundle","text":"remove_bundle(bundle_id::String; just_archive::Bool=false)\n\nRemoves bundle from cache. This is an irreversible operation. If just_archive is true it only flushes the archive folder.\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.ETL.Cache.store_bundle-Tuple{DataFrames.DataFrame}","page":"Autodocs","title":"AirBorne.ETL.Cache.store_bundle","text":"store_bundle(data::DataFrames.DataFrame; bundle_id::Union{Nothing, String}=nothing, archive::Bool=true, meta::Dict=Dict(), c_meta::Dict=Dict())\n\nStores a dataframe in a bundle in parquet format.\n\n**Is very important that none of the columns are of type \"Any\"** as the storage for this column type is not defined.\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.ETL.YFinance","page":"Autodocs","title":"AirBorne.ETL.YFinance","text":"This modules provides an interface between AirBorne and Yahoo Finance API. \n\nFor ForEx to obtain 5m definition the requested range must be within the last 60 days.\n\nTo request ForEx data replace the ticker by `codeA*codeB*\"=X\"` i.e. to obtain the ForEx of USD and GBP the \nticker must be \"USDGBP=X\".\n\n\n\n\n\n","category":"module"},{"location":"pages/autodocs/#AirBorne.ETL.YFinance.get_chart_data-NTuple{4, Any}","page":"Autodocs","title":"AirBorne.ETL.YFinance.get_chart_data","text":"get_chart_data(symbol, period1, period2, freq)\n\nThis function calls the Yahoo chart API to get the OHCLV data.\nThe documentation for this function is based on [CryptoCoinTracker's guide](https://cryptocointracker.com/yahoo-finance/yahoo-finance-api#34a6032b7b9949a1876f4568e4961afd).\n\n# Arguments\n\n- `symbol::String`:  Ticker Symbol\n- `period1::String`:  UNIX Timestamp indicating the start of the data requested\n- `period2::String`:  UNIX Timestamp indicating the end time of the data requested \n- `freq::String`: The time interval between two data points. Can be 1m 2m 5m 15m 30m 60m 90m 1h 1d 5d 1wk 1mo 3mo.\n\n# Returns\n- r::HTTP.Messages.Response\n\n# Examples\n```julia\n# This example is untestable as it requires internet connection.\njulia> import AirBorne\njulia> r = AirBorne.ETL.YFinance.get_chart_data(\"AAPL\",\"1577836800\",\"1580515200\",\"1d\")\n```\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.ETL.YFinance.get_interday_data-Tuple{Any, Any, Any}","page":"Autodocs","title":"AirBorne.ETL.YFinance.get_interday_data","text":"function get_interday_data(symbols, period1, period2)\n\nUse this function to get interday data for different tickers from Yahoo charts API.\n# Arguments\n- `symbols::String`:  Ticker Symbol\n- `period1::String`:  UNIX Timestamp indicating the start of the data requested\n- `period2::String`:  UNIX Timestamp indicating the end time of the data requested \n\n# Example\n```julia\nimport AirBorne\ndata = AirBorne.ETL.YFinance.get_interday_data([\"AAPL\",\"GOOG\"],\"1577836800\",\"1580515200\")\n```\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.ETL.YFinance.hello_yfinance-Tuple{}","page":"Autodocs","title":"AirBorne.ETL.YFinance.hello_yfinance","text":"hello_yfinance()\n\ns a string saying \"Hello YFinance!\".\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/","page":"Autodocs","title":"Autodocs","text":"Modules = [AirBorne.Markets,AirBorne.Markets.StaticMarket]","category":"page"},{"location":"pages/autodocs/#AirBorne.Markets","page":"Autodocs","title":"AirBorne.Markets","text":"Strategies\n\nThis module centralizes access to different market models.\n\nA market model is tuple with a module and a struct that can be used to simulate/estimate the execution of orders.  \n\nA market can represent a stock exchange like NYSE or secondary markets.\n\nAssumptions made during the modelling of the market will have a direct impact on the results from backtesting,\nany result from backtesting should be referenced to a strategy and a market model.\n\n\n\n\n\n","category":"module"},{"location":"pages/autodocs/#AirBorne.Markets.StaticMarket","page":"Autodocs","title":"AirBorne.Markets.StaticMarket","text":"StaticMarket\n\nThe static market assumes that the prices of the assets are not affected by the strategy used. \n\nThis is a big assumption for large orders but for smaller ones it can hold.\n\n\n\n\n\n","category":"module"},{"location":"pages/autodocs/#AirBorne.Markets.StaticMarket.Order","page":"Autodocs","title":"AirBorne.Markets.StaticMarket.Order","text":"Order\n\nRepresents an order to the market. I.e. A stock exchange. \n\nTODO: Add more documentation\n\n\n\n\n\n","category":"type"},{"location":"pages/autodocs/#AirBorne.Markets.StaticMarket.addJournalEntryToLedger-Tuple{Vector{Any}, Union{DotMaps.DotMap, Dict}}","page":"Autodocs","title":"AirBorne.Markets.StaticMarket.addJournalEntryToLedger","text":"addJournalEntryToLedger(ledger::Vector{Any},journalEntry::Union{DotMap,Dict})\n\nStaticMarket method to add journal entries to ledger.\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.Markets.StaticMarket.addSecurityToPortfolio-Tuple{Union{DotMaps.DotMap, Dict}, Union{DotMaps.DotMap, Dict}}","page":"Autodocs","title":"AirBorne.Markets.StaticMarket.addSecurityToPortfolio","text":"addSecurityToPortfolio(portfolio::Union{DotMap,Dict},security::Union{DotMap,Dict})\n\nStaticMarket method to add  securities to portfolios .\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.Markets.StaticMarket.available_data-Tuple{Any, Any}","page":"Autodocs","title":"AirBorne.Markets.StaticMarket.available_data","text":"available_data(context,data)\n\nThis function determine what data is available given the context.\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.Markets.StaticMarket.execute_orders!-NTuple{4, Any}","page":"Autodocs","title":"AirBorne.Markets.StaticMarket.execute_orders!","text":"execute_orders(from, to, context,data)\n\nThis function updates the portfolio of the user that is stored in the variable context.\n\nTODO: Add more documentation.\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.Markets.StaticMarket.expose_data-Tuple{Any, Any}","page":"Autodocs","title":"AirBorne.Markets.StaticMarket.expose_data","text":"expose_data(context,data)\n\nThis function determine how the data is transformed and filtered before being passed to the user.\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/","page":"Autodocs","title":"Autodocs","text":"Modules = [AirBorne.Engines,AirBorne.Engines.DEDS]","category":"page"},{"location":"pages/autodocs/#AirBorne.Engines","page":"Autodocs","title":"AirBorne.Engines","text":"This modules centralizes all features for strategy backtesting including different simulation archetypes.\n\n\n\n\n\n","category":"module"},{"location":"pages/autodocs/#AirBorne.Engines.DEDS","page":"Autodocs","title":"AirBorne.Engines.DEDS","text":"DEDS - Which stands for \"Discrete Event Driven Simulation\"  is a framework for backtesting\nwhere the system moves from one event to the next one.\n\n\n\n\n\n","category":"module"},{"location":"pages/autodocs/#AirBorne.Engines.DEDS.hello_deds-Tuple{}","page":"Autodocs","title":"AirBorne.Engines.DEDS.hello_deds","text":"DEDS module hello world\n\n\n\n\n\n","category":"method"},{"location":"pages/autodocs/#AirBorne.Engines.DEDS.run-Tuple{DataFrames.DataFrame, Vararg{Function, 4}}","page":"Autodocs","title":"AirBorne.Engines.DEDS.run","text":"run(data::DataFrame, initialize!::Function, trading_logic!::Function, execute_orders!::Function,expose_data::Function;audit=true)\n\nRun DEDS simulation provided:\n# Arguments\n- `data::DataFrame`: A dataframe with the data to be provided to the function `expose_data` and `Function, execute_orders!`.\n- `initialize!::Function`: initialize!(context) should receive a struct context and provide initialization for its accounts \n    and add as the next events to be processed by this function.\n- `trading_logic!::Function`: `trading_logic!(context,exposed_data)` receives the context and exposed data from the market \n  and should place orders and define further events \n- `execute_orders!::Function`: execute_orders!(past_event_date, context.current_event.date, context, data) Executes orders between\n    the past event and the current one, this function will modify the portfolio and the accounts from the context.\n### Optional keyword arguments\n- `audit::Bool=true`: If true context will its audit entry populated for each event in the simulation. \n- `max_iter::Int=10^6`: Limit the number of events processed on the simulation.\n# Returns\n- `context::Context`\n\n\n\n\n\n","category":"method"},{"location":"pages/financialModelling/#Financial-Modelling","page":"Financial Modelling","title":"Financial Modelling","text":"","category":"section"},{"location":"pages/financialModelling/","page":"Financial Modelling","title":"Financial Modelling","text":"This page describes the modelling behind different financial structures and data types.","category":"page"},{"location":"pages/financialModelling/#Money,-Currency-and-Wallets","page":"Financial Modelling","title":"Money, Currency and Wallets","text":"","category":"section"},{"location":"pages/financialModelling/#Money","page":"Financial Modelling","title":"Money","text":"","category":"section"},{"location":"pages/financialModelling/","page":"Financial Modelling","title":"Financial Modelling","text":"AirBorne provides a self-contained representation of money. Money is represented as a number with an associated Symbol parameter type that acts as the currency. Money with the same currency can be added together and Money can be multiplied by any real number. However Money cannot be multiplied by Money.","category":"page"},{"location":"pages/financialModelling/","page":"Financial Modelling","title":"Financial Modelling","text":"AirBorne is fully compatible with the module Currencies. But it can also support currencies outside ISO 4217, because the implementation of a currency is just through a Symbol representation.","category":"page"},{"location":"pages/financialModelling/","page":"Financial Modelling","title":"Financial Modelling","text":"    using AirBorne: Money\n    using Currencies: Currencies\n    USD = Currencies.currency(:USD)\n    GBP = Currencies.currency(:GBP)\n    UYU = Currencies.currency(:UYU)\n    a = 10USD\n    b = 10.0USD\n    c1 = Money{:GBP}(5.0)\n    c2 = Money{:GBP}(5)\n    # All the expression below are equivalent and should return true.\n    println(2.0 * a == (b + b))\n    println(2.0 * a == b * 2)\n    println(2 * a == b * 2.0)\n    println(USD * 2 == USD * 2.0)","category":"page"},{"location":"pages/financialModelling/#Wallets","page":"Financial Modelling","title":"Wallets","text":"","category":"section"},{"location":"pages/financialModelling/","page":"Financial Modelling","title":"Financial Modelling","text":"A Wallet is a collection of different types of Money. At its core is a dictionary with extra features for algebraic operations as one can add Money to a Wallet just by using the \"+\" operator, and wallets can be added together using the \"+\" operator as well. Moreover if a particular currency is not present in a wallet if you try to retrieve the amount of such currency from the wallet the answer will be 0 (instead of a KeyError response).","category":"page"},{"location":"pages/financialModelling/","page":"Financial Modelling","title":"Financial Modelling","text":"    using AirBorne: Money, Wallet\n    using Currencies: Currencies\n    USD = Currencies.currency(:USD)\n    GBP = Currencies.currency(:GBP)\n    UYU = Currencies.currency(:UYU)\n    \n    # Different ways to instantiate a wallet\n    w0 = Wallet(USD) \n    w1 = Wallet(:USD)\n    w2 = Wallet(20USD)\n    w3 = Wallet(50UYU)\n    w4 = Wallet(Dict(:USD => 20, :UYU => 50))\n    w5 = deepcopy(w3)\n    w5[:USD] = 10.0 # Define up the amount of USD in Wallet\n\n    # Arithmetic operations between wallets and money\n    w2 + 50UYU == w4 # Add money to wallet\n    20USD + w3 == w4 # Commutative property of addition\n    w2 + w3 == w4 # Combine wallets\n    20USD + 50UYU == w4 # Generate a wallet by adding different types of Money\n    \n\n    # Operations with keys\n    haskey(w5, :USD) # Check if wallet has currency defined\n    collect(keys(w5)) == [:UYU, :USD] # Get currencies in Wallet","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AirBorne","category":"page"},{"location":"#AirBorne","page":"Home","title":"AirBorne","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for AirBorne!","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this documentation you will find descriptions for the methods of the package, reasoning and sources for our high-level design and examples showing how this package can be leveraged. ","category":"page"},{"location":"pages/backtesting/eventDrivenSimulation/#Backtesting-and-Event-Driven-Simulation","page":"Event Driven Simulation","title":"Backtesting and Event Driven Simulation","text":"","category":"section"},{"location":"pages/backtesting/eventDrivenSimulation/","page":"Event Driven Simulation","title":"Event Driven Simulation","text":"In this section the main principles guiding the Event Driven Simulation engine used for backtesting is laid out.","category":"page"},{"location":"pages/backtesting/eventDrivenSimulation/#Guiding-Principles","page":"Event Driven Simulation","title":"Guiding Principles","text":"","category":"section"},{"location":"pages/backtesting/eventDrivenSimulation/","page":"Event Driven Simulation","title":"Event Driven Simulation","text":"The driving principles for backtesting are the following:","category":"page"},{"location":"pages/backtesting/eventDrivenSimulation/","page":"Event Driven Simulation","title":"Event Driven Simulation","text":"Speedeness: The simulation should be fast, extremely fast, so that most of the computational resources can be allocated to calculations that the user wants to do within the simulation. \nTransparency: Calculations should be as accurate, explainable and reproducible. Meaning that a user with some level of proficiency in Excel should be able to get back most of the calculations based solely on the description of the simulation and its calculations obtained in the documentation.\nRealism: From the user perspective the procedure of the simulation should have a strong correlation to what they would expect to see when trading in real life.","category":"page"},{"location":"pages/backtesting/eventDrivenSimulation/#Design","page":"Event Driven Simulation","title":"Design","text":"","category":"section"},{"location":"pages/backtesting/eventDrivenSimulation/","page":"Event Driven Simulation","title":"Event Driven Simulation","text":"The objective of event driven simulation is to do calculations only when necessary and making them as small as possible whilst at the same time having as many simulation points as needed to achieve realism.","category":"page"},{"location":"pages/backtesting/eventDrivenSimulation/","page":"Event Driven Simulation","title":"Event Driven Simulation","text":"Simulation starts by defining the event_queue which is a list of events, each event carries with them a timestamp and some minimal metadata that determines the workflow of the simulation.\nAt the beginning of the routine a special event called initialization_event is defined and added to the queue starting the simulation.\nAt the initialization_event the initialize method of the agent is called.\nDuring this stage the agent should decide how often the market(s) sends him data by either specifying a frequency or scheduling a future releasedataevent event for a particular market(s).\nDuring this stage a Dictionary context will be created, this variable will be propagated throughout the simulation./\nIf desired the agent can also perform actions such as place orders through a broker the orders placed will be placed in a list called order_queue.\nDuring this stage the broker used and its fee structure needs to also be defined, it can be modified at any point down the line but is assumed that the transactions are done through a broker during the simulation. Special broker to simulate the direct trade by the agent can also be put in place within this framework.  \nAt the end of the event brokers shall decide how to execute the order by interacting with markets generating a list of orderexecutionqueue.\nThen each market will execute the orders in unobservable  events that are communicated to brokers with potentially some delay or noise. Is worth noticing that some orders may have triggering conditions like sell only for a certain amount of currency for example, therefore the triggering of the execution will be left to the market through execution_events. execution_events can also include the payment of dividends. \nAt the releasedataevent the  handle_data event is called. The data available is the data from a bundle with a timestamp smaller than the time of the event.","category":"page"},{"location":"pages/backtesting/eventDrivenSimulation/","page":"Event Driven Simulation","title":"Event Driven Simulation","text":"This framework allows to have variable timewindows for the agent controlled dynamically by the agent himself.","category":"page"},{"location":"pages/backtesting/eventDrivenSimulation/#Engines","page":"Event Driven Simulation","title":"Engines","text":"","category":"section"},{"location":"pages/backtesting/eventDrivenSimulation/#DEDS","page":"Event Driven Simulation","title":"DEDS","text":"","category":"section"},{"location":"pages/backtesting/eventDrivenSimulation/","page":"Event Driven Simulation","title":"Event Driven Simulation","text":"Deterministic Event Driven Simulation (DEDS) is an engine that executes a series of events where a Market and a User interact with each other. The simulation iterates over a series of events allowing the user to retrieve data from the market and place orders, then the market executes the orders in between consecutive events.","category":"page"},{"location":"pages/backtesting/eventDrivenSimulation/","page":"Event Driven Simulation","title":"Event Driven Simulation","text":"Below one can appreciate the logic behind the AirBorne.Engines.DEDS.run function, which is the run method for the DEDS engine.","category":"page"},{"location":"pages/backtesting/eventDrivenSimulation/","page":"Event Driven Simulation","title":"Event Driven Simulation","text":"(Image: DEDS_run)","category":"page"}]
}
